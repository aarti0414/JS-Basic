class BinarySearchTree {
    constructor() {
        this.root = null;
    }
    insert(data) {
        var newNode = new Node(data);
        if (this.root === null) {
            this.root = newNode;
        } else {
            this.insertNode(this.root, newNode);
        };
    };
    insertNode(node, newNode) {
        if (newNode.data < node.data) {
            if (node.left === null) {
                node.left = newNode;
            } else {
                this.insertNode(node.left, newNode);
            };
        } else {
            if (node.right === null) {
                node.right = newNode;
            } else {
                this.insertNode(node.right, newNode);
            };
        };
    };
};

function getMinVal() {
    if (this.root === null) {
        throw "Empty tree!";
    }
    let currNode = this.root;

    while (currNode.left !== null) {
        currNode = currNode.left;
    }
    return currNode.data;
}
function getMaxVal() {
    if (this.root === null) {
          throw "Empty tree!";
    }
    let currNode = this.root;
    
    while (currNode.right !== null) {
       currNode = currNode.right;
    }
       return currNode.data;
    }
let BST = new BinarySearchTree();
BST.insert(5);
BST.insert(15);
BST.insert(10);
BST.insert(50);
BST.insert(3);
BST.insert(7);
BST.insert(12);
console.log(BST.getMinVal());
